[1mdiff --git a/cccpt/cli.py b/cccpt/cli.py[m
[1mindex 8bc1460..847c6fe 100755[m
[1m--- a/cccpt/cli.py[m
[1m+++ b/cccpt/cli.py[m
[36m@@ -26,13 +26,16 @@[m [mimport hashlib[m
 locale.setlocale(locale.LC_ALL,'')[m
 encoding = locale.getpreferredencoding()[m
 [m
[31m-@click.group(help="Clark's CMake, Conan, and C++ Project Tools.",context_settings=dict(ignore_unknown_options=True))[m
[32m+[m[32m@click.group(context_settings=dict(ignore_unknown_options=True))[m
 @click.option("--config","-c",default=".project.yml",help="Configuration file storing default options.")[m
 @click.option("--local-config-only","-l",is_flag=True,help="Do not look for global configuration files in parent directories.")[m
 @click.option("--build-dir","-b",help="Specify the build directory to use. By default, the build directory is computed.")[m
 @click.option("--verbose","-v",is_flag=True,help="Print verbose messages.")[m
 @click.pass_context[m
 def main(ctx,config,local_config_only,build_dir,verbose):[m
[32m+[m[32m  '''[m
[32m+[m[32m  Clark's Conan, CMake, and C++ Project Tools.[m
[32m+[m[32m  '''[m
 [m
   max_height = None[m
   if local_config_only:[m
[36m@@ -66,7 +69,7 @@[m [mdef main(ctx,config,local_config_only,build_dir,verbose):[m
   [m
 [m
 [m
[31m-@main.command(help="Configure a CMake project.")[m
[32m+[m[32m@main.command()[m
 @click.option("--release/--debug","-R/-D",help="Configure for release mode or debug mode.")[m
 @click.option("--install-prefix","-i",help="Specify the install directory.")[m
 @click.option("--extra-cmake-configure-options",multiple=True,help="Extra options to pass to configure step.")[m
[36m@@ -74,6 +77,9 @@[m [mdef main(ctx,config,local_config_only,build_dir,verbose):[m
 @click.option("--generator",help="Specify the generator to use.")[m
 @click.pass_context[m
 def configure(ctx,release,install_prefix,extra_cmake_configure_options,extra_conan_install_options,generator):[m
[32m+[m[32m  '''[m
[32m+[m[32m  Configure a CMake project.[m
[32m+[m[32m  '''[m
 [m
   if extra_cmake_configure_options is None or len(extra_cmake_configure_options) < 1:[m
     extra_cmake_configure_options = ctx.obj.get("/project/configure/extra-cmake-configure-options",[])[m
[36m@@ -147,7 +153,7 @@[m [mdef configure(ctx,release,install_prefix,extra_cmake_configure_options,extra_con[m
 [m
   return 0[m
 [m
[31m-@main.command(help="Build a CMake project.")[m
[32m+[m[32m@main.command()[m
 @click.option("--release/--debug","-R/-D",help="Build release mode or debug mode.")[m
 @click.option("--extra-cmake-build-options",multiple=True,help="Extra options to pass to build step.")[m
 @click.option("--target","-t",help="Build specific target.")[m
[36m@@ -155,6 +161,9 @@[m [mdef configure(ctx,release,install_prefix,extra_cmake_configure_options,extra_con[m
 @click.option("--parallel","-j",default=-1,help="Run the build command in with INTEGER parallel jobs if possible.")[m
 @click.pass_context[m
 def build(ctx,release,extra_cmake_build_options,run_configure,target,parallel):[m
[32m+[m[32m  '''[m
[32m+[m[32m  Build a CMake project.[m
[32m+[m[32m  '''[m
 [m
   if extra_cmake_build_options is None or len(extra_cmake_build_options) < 1:[m
     extra_cmake_build_options = ctx.obj.get("project/build/extra-cmake-build-options",[])[m
[36m@@ -189,17 +198,21 @@[m [mdef build(ctx,release,extra_cmake_build_options,run_configure,target,parallel):[m
 [m
 [m
 [m
[31m-@main.command(help="Test a Clark project by running unit tests.")[m
[32m+[m[32m@main.command()[m
 @click.option("--release/--debug","-R/-D",help="Test release mode or debug mode.")[m
 @click.option("--match","-k",help="Only run test executable matching TEXT.")[m
 @click.option("--skip-build/--run-build","-s/-b",help="Skip build phase.")[m
 @click.pass_context[m
 def test(ctx,release,match,skip_build):[m
[32m+[m[32m  '''[m
[32m+[m[32m  Test a Clark project by running unit tests.[m
[32m+[m[32m  '''[m
   if not skip_build:[m
     ret = ctx.invoke(build,release=release)[m
     if ret != 0:[m
       click.echo(click.style(f"Build phase returned non-zero, indicating that there was an error. Skipping test phase.",fg="red"))[m
       return ret[m
[32m+[m[41m  [m
 [m
   build_dir = ctx.obj.get("/project/build-dir",None)[m
   if build_dir is None:[m
[36m@@ -439,7 +452,7 @@[m [mdef new(ctx, name):[m
 @click.option("--conan-recipe-file", "-r", help="Conan recipe file.")[m
 @click.option("--install-prefix", "-i", help="Specify the install directory.")[m
 @click.pass_context[m
[31m-def make_conan_editable_package(ctx,conan_package_reference,conan_recipe_file):[m
[32m+[m[32mdef make_conan_editable_package(ctx,conan_package_reference,conan_recipe_file,install_prefix):[m
   '''[m
   Create a Conan editable package from a project.[m
 [m
[36m@@ -473,6 +486,8 @@[m [mdef make_conan_editable_package(ctx,conan_package_reference,conan_recipe_file):[m
   build_dir = get_build_dir(Path(),False)[m
   build_dir = build_dir.parent / (build_dir.name + "-conan_editable_package")[m
   install_dir = build_dir/"INSTALL"[m
[32m+[m[32m  if install_prefix:[m
[32m+[m[32m    install_dir = Path(install_prefix)[m
 [m
   conan = ctx.obj.get('/project/commands/conan','conan')[m
 [m
[36m@@ -782,9 +797,10 @@[m [mdef ls_remote(ctx,name,remote,tags,heads,all,print_errors):[m
 [m
 @main.command(help="Tag current commit for release after running unit tests and any pre-release test scripts.")[m
 @click.argument("tag")[m
[31m-@click.option("--dirty-ok","-d",help="Dont error out if working directory is not clean.")[m
[32m+[m[32m@click.option("--dirty-ok","-d",is_flag=True,help="Don't error out if working directory is not clean.")[m
[32m+[m[32m@click.option("--dry-run","-n",is_flag=True,help="Don't actually tag, just run checks.")[m
 @click.pass_context[m
[31m-def tag_for_release(ctx,tag,dirty_ok):[m
[32m+[m[32mdef tag_for_release(ctx,tag,dirty_ok,dry_run):[m
 [m
   git = ctx.obj.get('/project/commands/git','git')[m
   tags = subprocess.check_output([git,'tag']).decode(encoding).split('\n')[m
[36m@@ -807,7 +823,11 @@[m [mdef tag_for_release(ctx,tag,dirty_ok):[m
     error("Unit tests did not pass. Exiting now!")[m
     return 1[m
 [m
[31m-  hook_patterns = ["**/pre-tag-release.sh"][m
[32m+[m[32m  hook_patterns = [][m
[32m+[m[32m  if platform.system().lower() == "linux":[m
[32m+[m[32m    hook_patterns = ["**/pre-tag-release.sh"][m
[32m+[m[32m  if platform.system().lower() == "windows":[m
[32m+[m[32m    hook_patterns = ["**/pre-tag-release.bat"][m
   for hook_pattern in hook_patterns:[m
     hooks = root.glob(hook_pattern)[m
     for hook in hooks:[m
[36m@@ -823,8 +843,8 @@[m [mdef tag_for_release(ctx,tag,dirty_ok):[m
 [m
 [m
   sucess("All tests passed. Tagging commit.")[m
[31m-  subprocess.run([git,'tag',tag])[m
[31m-# util functions[m
[32m+[m[32m  if not dry_run:[m
[32m+[m[32m    subprocess.run([git,'tag',tag])[m
 [m
 [m
 @main.command(help="Open a C++ project to start editing code. Only useful for IDE users.")[m
